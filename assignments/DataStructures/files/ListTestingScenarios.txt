LIST TESTING SCENARIOS FOR IndexedUnsortedList ADT

starting state -> change -> resulting state

Ideally, for each scenario below, the results of every method supported by the list (including Iterator methods) should be tested for full coverage.
However, since implementing full coverage may require more time than available, you will need to prioritize scenarios and implement tests for the highest value scenarios first and follow up with additional scenarios as time allows.
 
1) no list -> constructor -> []
2) [] -> addToFront(A) -> [A]
3) [] -> addToRear(A) -> [A]
4) [] -> add(A) -> [A]
5) [] -> add(0,A) -> [A]
6) [A] -> addToFront(B) -> [B,A]
7) [A] -> addToRear(B) -> [A,B]
8) [A] -> addAfter(B,A) -> [A,B]
9) [A] -> add(B) -> [A,B]
10) [A] -> add(0,B) -> [B,A]
11) [A] -> add(1,B) -> [A,B]
12) [A] -> removeFirst() -> []
13) [A] -> removeLast() -> []
14) [A] -> remove(A) -> []
15) [A] -> remove(0) -> []
16) [A] -> set(0,B) -> [B]
17) [A,B] -> addToFront(C) -> [C,A,B]
18) [A,B] -> addToRear(C) -> [A,B,C]
19) [A,B] -> addAfter(C,A) -> [A,C,B]
20) [A,B] -> addAfter(C,B) -> [A,B,C]
21) [A,B] -> add(C) -> [A,B,C]
22) [A,B] -> add(0,C) -> [C,A,B]
23) [A,B] -> add(1,C) -> [A,C,B]
24) [A,B] -> add (2,C) -> [A,B,C]
25) [A,B] -> removeFirst() -> [B]
26) [A,B] -> removeLast() -> [A]
27) [A,B] -> remove(A) -> [B]
28) [A,B] -> remove(B) -> [A]
29) [A,B] -> remove(0) -> [B]
30) [A,B] -> remove(1) -> [A]
31) [A,B] -> set(0,C) -> [C,B]
32) [A,B] -> set(1,C) -> [A,C]
33) [A,B,C] -> removeFirst() -> [B,C]
34) [A,B,C] -> removeLast() -> [A,B]
35) [A,B,C] -> remove(A) -> [B,C]
36) [A,B,C] -> remove(B) -> [A,C]
37) [A,B,C] -> remove(C) -> [A,B]
38) [A,B,C] -> remove(0) -> [B,C]
39) [A,B,C] -> remove(1) -> [A,C]
40) [A,B,C] -> remove(2) -> [A,B]
41) [A,B,C] -> set(0,D) -> [D,B,C]
42) [A,B,C] -> set(1,D) -> [A,D,C]
43) [A,B,C] -> set(2,D) -> [A,B,D]

including Iterator remove() method, add the following:
44) [A] -> iterator remove() after next() returns A -> []
45) [A,B] -> iterator remove() after next() returns A -> [B]
46) [A,B] -> iterator remove() after next() returns B -> [A]
47) [A,B,C] -> iterator remove() after next() returns A -> [B,C]
48) [A,B,C] -> iterator remove() after next() returns B -> [A,C]
49) [A,B,C] -> iterator remove() after next() returns C -> [A,B]
 
including ListIterator with remove(), add(), and set() methods:
50-55) same as Iterator remove() after next() scenarios above
56) [A] -> iterator remove() after previous() returns A -> []
57) [A,B] -> iterator remove() after previous() returns A -> [B]
58) [A,B] -> iterator remove() after previous() returns B -> [A]
59) [A,B,C] -> iterator remove() after previous() returns A -> [B,C]
60) [A,B,C] -> iterator remove() after previous() returns B -> [A,C]
61) [A,B,C] -> iterator remove() after previous() returns C -> [A,B]
62) [] -> iterator add(A) -> [A]
63) [A] -> iterator add(B) with new iterator -> [B,A]
64) [A] -> iterator add(B) after next() returns A -> [A,B]
65) [A] -> iterator add(B) after previous() returns A -> [B,A]
66) [A,B] -> iterator add(C) with new iterator -> [C,A,B]
67) [A,B] -> iterator add(C) after next() returns A -> [A,C,B]
68) [A,B] -> iterator add(C) after next() returns B -> [A,B,C]
69) [A,B] -> iterator add(C) after previous() returns A -> [C,A,B]
70) [A,B] -> iterator add(C) after previous() returns B -> [A,C,B]
71) [A] -> iterator set(B) after next() returns A -> [B]
72) [A] -> iterator set(B) after previous() returns A -> [B]
73) [A,B] -> iterator set(C) after next() returns A -> [C,B]
74) [A,B] -> iterator set(C) after next() returns B -> [A,C]
75) [A,B] -> iterator set(C) after previous() returns A -> [C,B]
76) [A,B] -> iterator set(C) after previous() returns B -> [A,C]
77) [A,B,C] -> iterator set(D) after next() returns A -> [D,B,C]
78) [A,B,C] -> iterator set(D) after next() returns B -> [A,D,C]
79) [A,B,C] -> iterator set(D) after next() returns C -> [A,B,D]
80) [A,B,C] -> iterator set(D) after previous() returns A -> [D,B,C]
81) [A,B,C] -> iterator set(D) after previous() returns B -> [A,D,C]
82) [A,B,C] -> iterator set(D) after previous() returns C -> [A,B,D]
 
ArrayList/SLL with fully-implemented Iterator: 49 scenarios
DLL with fully-implemented ListIterator: 82 scenarios
 
An example of one test scenario for IndexedUnsortedList with Iterator, only:
  Add a new element to the front of a list containing one element.
  Starting state: [A]
  Change: Call addToFront(B)
  Resulting state: [B, A]
  Tests:
    addToFront(C) throws no Exceptions
    addToRear(C) throws no Exceptions
    addAfter(C, B) throws no Exceptions
    addAfter(C, A) throws no Exceptions
    addAfter(C, D) throws NoSuchElementException
    add(C) throws no Exception
    add(-1,C) throws IndexOutOfBoundsException
    add(0,C) throws no Exception
    add(1,C) throws no Exception
    add(2,C) throws no Exception
    add(3,C) throws IndexOutOfBoundsException
    removeFirst() returns B
    removeLast() returns A
    remove(A) returns A
    remove(B) returns B
    remove(C) throws NoSuchElementException
    remove(-1) throws IndexOutOfBoundsException
    remove(0) returns B
    remove(1) returns A
    remove(2) throws IndexOutOfBoundsException
    set(-1,C) throws IndexOutOfBoundsException
    set(0,C) throws no Exception
    set(1,C) throws no Exception
    set(2,C) throws IndexOutOfBoundsException
    get(-1) throws IndexOutOfBoundsException
    get(0) returns B
    get(1) returns A
    get(2) throws IndexOutOfBoundsException
    indexOf(A) returns 1
    indexOf(B) returns 0
    indexOf(C) returns -1
    first() returns B
    last() returns A
    contains(A) returns true
    contains(B) returns true
    contains(C) returns false
    isEmpty() returns false
    size() returns 2
    iterator() returns an Iterator reference
    iterator hasNext() returns true
    iterator next() returns B
    iterator remove() throws IllegalStateException
    iterator hasNext() after next() returns true
    iterator next() after next() returns A
    iterator remove() after next() throws no Exception
    iterator hasNext() after next() and remove() returns true
    iterator next() after next() and remove() returns A
    iterator remove() after next() and remove() throws IllegalStateException
    iterator hasNext() after 2x next() returns false
    iterator next() after 2x next() throws NoSuchElementException
    iterator remove() after 2x next() throws no Exception
    iterator remove() after 2x next() and remove() throws IllegalStateException
    listIterator() throws UnsupportedOperationException
    listIterator(0) throws UnsupportedOperationException
    toString() returns "[B, A]"
    

